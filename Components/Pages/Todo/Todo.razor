@page "/todo"
@rendermode InteractiveServer

@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<h1 class="todo-title">Todo List (@todos.Count(todo => !todo.IsDone))</h1>

<div class="todo-container">
  <div class="todo-add-block">
    <input class="todo-add-field" @bind="newTodo" placeholder="Add new task" />
    <button class="todo-add-button" @onclick="AddTodo">Add Todo</button>
  </div>
  @if (!hasLoadedTodos)
  {
    <div>Loading ...</div>
  }
  else
  {
    <ul>
      @foreach (var todo in todos)
      {
        <li>
          <input type="checkbox" @bind="todo.IsDone" @bind:after="SaveListToStorage" />
          <input @bind="todo.Title" @bind:after="SaveListToStorage" />
        </li>
      }
    </ul>
  }
</div>


@code {
  private bool hasLoadedTodos = false;
  private List<TodoItem> todos = new();
  string newTodo = "";

  void AddTodo()
  {
    if (!string.IsNullOrWhiteSpace(newTodo))
    {
      todos.Add(new TodoItem { Title = newTodo });
      newTodo = string.Empty;
      LocalStorage.SetItemAsync<List<TodoItem>>("todos", todos);
    }
  }

  void SaveListToStorage()
  {
    LocalStorage.SetItemAsync<List<TodoItem>>("todos", todos);
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      todos = await LocalStorage.GetItemAsync<List<TodoItem>>("todos") ?? [];
      hasLoadedTodos = true;
      this.StateHasChanged();
    }
  }
}